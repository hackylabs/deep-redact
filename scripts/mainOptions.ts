import { renderTable, type TableData } from './_renderTable'

const tableData: TableData = [
  {
    key: 'blacklistedKeys',
    description: 'Deeply compare names of these keys against the keys in your object.',
    type: 'array',
    options: 'Array<string￨RegExp￨BlacklistKeyConfig>',
    default: '[]',
    required: 'N',
  },
  {
    key: 'stringTests',
    description: 'Array of regular expressions to perform against string values, whether that value is a flat string or nested within an object. Can redact whole or partial string values. If a replacer function is provided in the config for the associated test, it will be used to redact the value if the value matches the test.',
    type: 'array',
    options: 'Array<RegExp￨StringTestConfig>',
    default: '[]',
    required: 'N',
  },
  {
    key: 'fuzzyKeyMatch',
    description: 'Loosely compare key names by checking if the key name of your unredacted object is included anywhere within the name of your blacklisted key. For example, is "pass" (your key) included in "password" (from config).',
    type: 'boolean',
    options: '',
    default: 'false',
    required: 'N',
  },
  {
    key: 'caseSensitiveKeyMatch',
    description: 'Loosely compare key names by normalising the strings. This involves removing non-word characters and transforms the string to lowercase. This means you never have to worry having to list duplicate keys in different formats such as snake_case, camelCase, PascalCase or any other case.',
    type: 'boolean',
    options: '',
    default: 'true',
    required: 'N',
  },
  {
    key: 'remove',
    description: 'Determines whether or not to remove the key from the object when it is redacted.',
    type: 'boolean',
    options: '',
    default: 'false',
    required: 'N',
  },
  {
    key: 'retainStructure',
    description: 'Determines whether or not keep all nested values of a key that is going to be redacted. Circular references are always removed.',
    type: 'boolean',
    options: '',
    default: 'false',
    required: 'N',
  },
  {
    key: 'replacement',
    description: 'When a value is going to be redacted, what would you like to replace it with?',
    type: 'string ￨ function',
    options: '',
    default: '[REDACTED]',
    required: 'N',
  },
  {
    key: 'replaceStringByLength',
    description: 'When a string value is going to be replaced, optionally replace it by repeating the `replacement` to match the length of the value. For example, if `replaceStringByLength` were set to `true` and `replacement` was set to "x", then redacting "secret" would return "xxxxxx". This is sometimes useful for debugging purposes, although it may be less secure as it could give hints to the original value.',
    type: 'boolean',
    options: '',
    default: 'false',
    required: 'N',
  },
  {
    key: 'types',
    description: 'JS types (values of `typeof` keyword). Only values with a typeof equal to `string`, `number`, `bigint`, `boolean`, `symbol`, `object`, or `function` will be redacted. Undefined values will never be redacted, although the type `undefined` is included in this list to keep TypeScript happy.',
    type: 'array',
    options: 'Array<\'string\'￨\'number\'￨\'bigint\'￨\'boolean\'￨\'symbol\'￨\'undefined\'￨\'object\'￨\'function\'>',
    default: '[\'string\']',
    required: 'N',
  },
  {
    key: 'serialise',
    description: 'Determines whether or not to serialise the object after redacting. Typical use cases for this are when you want to send it over the network or save to a file, both of which are common use cases for redacting sensitive information.',
    type: 'boolean',
    options: '',
    default: 'true',
    required: 'N',
  },
  {
    key: 'serialize',
    description: 'Alias of `serialise` for International-English users.',
    type: 'boolean',
    options: '',
    default: 'Value of `serialise`',
    required: 'N',
  },
  {
    key: 'transformers',
    description: 'A list of transformers to apply when transforming unsupported values. Each transformer should conditionally transform the value, or return the value unchanged to be passed to the next transformer. Transformers will be run in the order they are provided over the entire object.',
    type: 'array',
    options: 'Array<Transformer>',
    default: 'All standard transformers (bigint, date, error, map, regex, set, and url)',
    required: 'N',
  },
]

export const mainOptions = renderTable(tableData)
